<?php

declare(strict_types=1);

namespace Serafim\PackedArray;

use Serafim\PackedArray\Exception\ArraySizeException;
use Serafim\PackedArray\Exception\OffsetRangeException;
use Serafim\PackedArray\Exception\OffsetTypeException;
use Serafim\PackedArray\Exception\ValueRangeException;
use Serafim\PackedArray\Exception\ValueTypeException;

/**
 * @generated Please note that this class has been generated.
 *
 * @template-extends TypedArray<{{ sample.type }}<{{ sample.fromDocBlock }}, {{ sample.toDocBlock }}>>
 */
final class {{ sample.class }} extends TypedArray
{
    /**
     * The constant represents the size in bytes of each element in a typed array.
     *
     * @var int<1, max>
     */
    public const ELEMENT_BYTES = {{ sample.bytesPerElement }};

    /**
     * The minimal available value of the element.
     *
     * @var {{ sample.type }}<{{ sample.fromDocBlock }}, {{ sample.toDocBlock }}>
     */
    public const ELEMENT_MIN_VALUE = {{ sample.from }};

    /**
     * The maximal available value of the element.
     *
     * @var {{ sample.type }}<{{ sample.fromDocBlock }}, {{ sample.toDocBlock }}>
     */
    public const ELEMENT_MAX_VALUE = {{ sample.to }};

{% if sample.endianness %}
    public readonly Endianness $endianness;

    public function __construct(
        string $bytes,
        Endianness $endianness = null,
    ) {
{% if sample.precondition %}
        {{ sample.precondition | raw }}

{% endif %}
        $this->endianness = $endianness ?? Endianness::auto();

        parent::__construct($bytes, self::ELEMENT_BYTES);
    }

    public static function fromBytes(
        string $bytes,
        Endianness $endianness = null,
    ): self {
        return new self($bytes, $endianness);
    }

    public static function new(
        int $size,
        Endianness $endianness = null,
    ): self {
        assert($size >= 0, ArraySizeException::fromUnderflow('{{ sample.class }}', $size));

        return self::fromBytes(\str_repeat("\0", $size * self::ELEMENT_BYTES), $endianness);
    }
{% else %}
    public function __construct(string $bytes)
    {
{% if sample.precondition %}
        {{ sample.precondition | raw }}

{% endif %}
        parent::__construct($bytes, self::ELEMENT_BYTES);
    }

    public static function fromBytes(string $bytes): self
    {
        return new self($bytes);
    }

    public static function new(int $size): self
    {
        assert($size >= 0, ArraySizeException::fromUnderflow('{{ sample.class }}', $size));

        return self::fromBytes(\str_repeat("\0", $size * self::ELEMENT_BYTES));
    }
{% endif %}

    /**
     * @param int<0, max> $offset
     */
    public function offsetExists(mixed $offset): bool
    {
        assert(\is_int($offset), OffsetTypeException::fromInvalidType((string)$this, $offset));

        return $offset >= 0 && $offset < $this->length;
    }

    /**
     * @param int<0, max> $offset
     *
     * @return {{ sample.type }}<{{ sample.fromDocBlock }}, {{ sample.toDocBlock }}>
     *
     * @psalm-suppress MoreSpecificReturnType : The type in the docblock is more
     *                 restrictive than the type specified in the return type.
     * @psalm-suppress LessSpecificReturnStatement : Same to "MoreSpecificReturnType"
     */
    public function offsetGet(mixed $offset): {{ sample.type }}
    {
        assert(\is_int($offset), OffsetTypeException::fromInvalidType((string)$this, $offset));
        assert($offset >= 0, OffsetRangeException::fromUnderflow((string)$this, $offset));
        assert($offset < $this->length, OffsetRangeException::fromOverflow((string)$this, $offset, $this->length));

        return {{ sample.unpack | raw }}
    }

    /**
     * @param int<0, max> $offset
     * @param {{ sample.type }}<{{ sample.fromDocBlock }}, {{ sample.toDocBlock }}> $value
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        assert(\is_int($offset), OffsetTypeException::fromInvalidType((string)$this, $offset));
        assert($offset >= 0, OffsetRangeException::fromUnderflow((string)$this, $offset));
        assert($offset < $this->length, OffsetRangeException::fromOverflow((string)$this, $offset, $this->length));

        assert(\is_{{ sample.type }}($value), ValueTypeException::fromInvalidType((string)$this, $value));
        assert($value >= self::ELEMENT_MIN_VALUE, ValueRangeException::fromUnderflow((string)$this, $value));
        assert($value <= self::ELEMENT_MAX_VALUE, ValueRangeException::fromOverflow((string)$this, $value));

        {{ sample.pack | raw }}
    }

    /**
     * @param int<0, max> $offset
     */
    public function offsetUnset(mixed $offset): void
    {
        assert(\is_int($offset), OffsetTypeException::fromInvalidType((string)$this, $offset));
        assert($offset >= 0, OffsetRangeException::fromUnderflow((string)$this, $offset));
        assert($offset < $this->length, OffsetRangeException::fromOverflow((string)$this, $offset, $this->length));

        $value = {{ sample.default }};
        {{ sample.pack | raw }}
    }

    /**
     * @return \Traversable<int<0, max>, {{ sample.type }}<{{ sample.fromDocBlock }}, {{ sample.toDocBlock }}>>
     *
     * @psalm-suppress MoreSpecificReturnType : The type in the docblock is more
     *                 restrictive than the type specified in method's body.
     * @psalm-suppress LessSpecificReturnStatement : Same to "MoreSpecificReturnType"
     */
    public function getIterator(): \Traversable
    {
        for ($offset = 0; $offset < $this->bytes; {% apply spaceless %}
            {% if sample.bytesPerElement > 1 %}
                $offset += {{ sample.bytesPerElement }}
            {% else %}
                ++$offset
            {% endif %}
        {% endapply %}) {
            yield $offset => {{ sample.unpack | raw }}
        }
    }
}
